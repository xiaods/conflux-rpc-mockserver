{
    "openrpc": "1.0.0",
    "info": {
      "version": "1.0.10",
      "title": "Conflux-chain JSON-RPC",
      "description": "This API lets you interact with an EVM-based client via JSON-RPC",
      "license": {
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
      }
    },
    "methods": [
      {
        "name": "cfx_getTransactionByHash",
        "summary": "Returns the information about a transaction requested by transaction hash.",
        "params": [
            {
                "$ref": "#/components/contentDescriptors/Transaction"
            }
        ],
        "result": {
            "$ref": "#/components/contentDescriptors/TransactionResult"
        }
      },
      {
        "name": "cfx_getBlockByHash",
        "summary": "Returns information about a block by hash.",
        "params": [
            {
                "name": "blockHash",
                "required": true,
                "schema": {
                  "$ref": "#/components/schemas/BlockHash"
                }
              },
              {
                "name": "includeTransactions",
                "description": "If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.",
                "required": true,
                "schema": {
                  "title": "isTransactionsIncluded",
                  "type": "boolean"
                }
              }
        ],
        "result": {
            "name": "getBlockByHashResult",
            "schema": {
              "title": "getBlockByHashResult",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Block"
                },
                {
                  "$ref": "#/components/schemas/Null"
                }
              ]
            }
        }
      },
      {
        "name": "cfx_getBlockByEpochNumber",
        "summary": "Gets a block for a given number.",
        "params": [
          {
            "$ref": "#/components/contentDescriptors/BlockNumber"
          },
          {
            "name": "includeTransactions",
            "description": "If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.",
            "required": true,
            "schema": {
              "title": "isTransactionsIncluded",
              "type": "boolean"
            }
          }
        ],
        "result": {
          "name": "getBlockByNumberResult",
          "schema": {
            "title": "getBlockByNumberResult",
            "oneOf": [
              {
                "$ref": "#/components/schemas/Block"
              },
              {
                "$ref": "#/components/schemas/Null"
              }
            ]
          }
        }
      },
      {
        "name": "cfx_getBestBlockHash",
        "summary": "Returns the hash of best block.",
        "params": [],
        "result": {
            "$ref": "#/components/contentDescriptors/Transaction"
        }
      },
      {
        "name": "cfx_epochNumber",
        "summary": "Returns the current epoch number the client is on",
        "params": [
            {
                "name": "blockHash",
                "required": false,
                "schema": {
                  "$ref": "#/components/schemas/BlockNumberTag"
                }
              }
        ],
        "result": {
            "$ref": "#/components/contentDescriptors/BlockNumber"
        }
      },
      {
        "name": "cfx_gasPrice",
        "summary": "Returns the current price per gas in Drip.",
        "params": [],
        "result": {
          "$ref": "#/components/contentDescriptors/GasPrice"
        }
      },
      {
        "name": "cfx_getBlocksByEpoch",
        "summary": "Returns hashes of blocks located in some epoch.",
        "params": [
            {
                "name": "blockHash",
                "required": false,
                "schema": {
                  "$ref": "#/components/schemas/BlockHash"
                }
              }
        ],
        "result": {
            "name": "pendingTransactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/BlockHash"
              }
            }
          }
      },
      {
        "name": "cfx_getBalance",
        "summary": "Returns the balance of the account of given address.",
        "params": [
            {
              "name": "address",
              "required": true,
              "description": "The address of the account or contract",
              "schema": {
                "$ref": "#/components/schemas/Address"
              }
            },
            {
              "name": "blockNumber",
              "description": "A BlockNumber at which to request the balance",
              "schema": {
                "$ref": "#/components/schemas/BlockNumber"
              }
            }
          ],
          "result": {
            "name": "getBalanceResult",
            "schema": {
              "title": "getBalanceResult",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Integer"
                },
                {
                  "$ref": "#/components/schemas/Null"
                }
              ]
            }
          }
      },
      {
        "name": "cfx_getTransactionCount",
        "summary": "Returns the number of transactions sent from an address.",
        "params": [
            {
              "$ref": "#/components/contentDescriptors/Address"
            },
            {
              "$ref": "#/components/contentDescriptors/BlockNumber"
            }
          ],
          "result": {
            "name": "transactionCount",
            "schema": {
              "title": "nonceOrNull",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Nonce"
                },
                {
                  "$ref": "#/components/schemas/Null"
                }
              ]
            }
          }
      },
      {
        "name": "cfx_sendRawTransaction",
        "summary": "Creates new message call transaction or a contract creation for signed transactions.",
        "params": [
            {
              "name": "signedTransactionData",
              "required": true,
              "description": "The signed transaction data",
              "schema": {
                "$ref": "#/components/schemas/Bytes"
              }
            }
          ],
          "result": {
            "name": "transactionHash",
            "schema": {
              "description": "The transaction hash, or the zero hash if the transaction is not yet available.",
              "$ref": "#/components/schemas/Keccak"
            }
          }
      }
    ],
    "components": {
      "schemas": {
        "ProofNode": {
          "type": "string",
          "description": "An individual node used to prove a path down a merkle-patricia-tree",
          "$ref": "#/components/schemas/Bytes"
        },
        "AccountProof": {
          "$ref": "#/components/schemas/ProofNodes"
        },
        "StorageProof": {
          "type": "array",
          "description": "Current block header PoW hash.",
          "items": {
            "type": "object",
            "description": "Object proving a relationship of a storage value to an account's storageHash.",
            "properties": {
              "key": {
                "description": "The key used to get the storage slot in its account tree",
                "$ref": "#/components/schemas/Integer"
              },
              "value": {
                "description": "The value of the storage slot in its account tree",
                "$ref": "#/components/schemas/Integer"
              },
              "proof": {
                "$ref": "#/components/schemas/ProofNodes"
              }
            }
          }
        },
        "ProofNodes": {
          "type": "array",
          "description": "The set of node values needed to traverse a patricia merkle tree (from root to leaf) to retrieve a value",
          "items": {
            "$ref": "#/components/schemas/ProofNode"
          }
        },
        "PowHash": {
          "description": "Current block header PoW hash.",
          "$ref": "#/components/schemas/DataWord"
        },
        "SeedHash": {
          "description": "The seed hash used for the DAG.",
          "$ref": "#/components/schemas/DataWord"
        },
        "MixHash": {
          "description": "The mix digest.",
          "$ref": "#/components/schemas/DataWord"
        },
        "Difficulty": {
          "description": "The boundary condition ('target'), 2^256 / difficulty.",
          "$ref": "#/components/schemas/DataWord"
        },
        "FilterId": {
          "type": "string",
          "description": "An identifier used to reference the filter."
        },
        "BlockHash": {
          "type": "string",
          "pattern": "^0x[a-fA-F\\d]{64}$",
          "description": "The hex representation of the Keccak 256 of the RLP encoded block"
        },
        "BlockNumber": {
          "type": "string",
          "pattern": "^0x[a-fA-F\\d]+$",
          "description": "The hex representation of the block's height"
        },
        "BlockNumberTag": {
          "type": "string",
          "description": "The optional block height description",
          "enum": [
            "latest_mined",
            "latest_state",
            "earliest"
          ]
        },
        "Receipt": {
          "type": "object",
          "description": "The receipt of a transaction",
          "required": [
            "blockHash",
            "blockNumber",
            "contractAddress",
            "cumulativeGasUsed",
            "from",
            "gasUsed",
            "logs",
            "logsBloom",
            "to",
            "transactionHash",
            "transactionIndex"
          ],
          "properties": {
            "blockHash": {
              "description": "BlockHash of the block in which the transaction was mined",
              "$ref": "#/components/schemas/BlockHash"
            },
            "blockNumber": {
              "description": "BlockNumber of the block in which the transaction was mined",
              "$ref": "#/components/schemas/BlockNumber"
            },
            "contractAddress": {
              "description": "The contract address created, if the transaction was a contract creation, otherwise null",
              "$ref": "#/components/schemas/Address"
            },
            "cumulativeGasUsed": {
              "description": "The gas units used by the transaction",
              "$ref": "#/components/schemas/Integer"
            },
            "from": {
              "description": "The sender of the transaction",
              "$ref": "#/components/schemas/Address"
            },
            "gasUsed": {
              "description": "The total gas used by the transaction",
              "$ref": "#/components/schemas/Integer"
            },
            "logs": {
              "type": "array",
              "description": "An array of all the logs triggered during the transaction",
              "items": {
                "$ref": "#/components/schemas/Log"
              }
            },
            "logsBloom": {
              "$ref": "#/components/schemas/BloomFilter"
            },
            "to": {
              "description": "Destination address of the transaction",
              "$ref": "#/components/schemas/Address"
            },
            "transactionHash": {
              "description": "Keccak 256 of the transaction",
              "$ref": "#/components/schemas/Keccak"
            },
            "transactionIndex": {
              "description": "An array of all the logs triggered during the transaction",
              "$ref": "#/components/schemas/BloomFilter"
            },
            "postTransactionState": {
              "description": "The intermediate stateRoot directly after transaction execution.",
              "$ref": "#/components/schemas/Keccak"
            },
            "status": {
              "description": "Whether or not the transaction threw an error.",
              "type": "boolean"
            }
          }
        },
        "BloomFilter": {
          "type": "string",
          "description": "A 2048 bit bloom filter from the logs of the transaction. Each log sets 3 bits though taking the low-order 11 bits of each of the first three pairs of bytes in a Keccak 256 hash of the log's byte series"
        },
        "Log": {
          "type": "object",
          "description": "An indexed event generated during a transaction",
          "properties": {
            "address": {
              "description": "Sender of the transaction",
              "$ref": "#/components/schemas/Address"
            },
            "blockHash": {
              "description": "BlockHash of the block in which the transaction was mined",
              "$ref": "#/components/schemas/BlockHash"
            },
            "blockNumber": {
              "description": "BlockNumber of the block in which the transaction was mined",
              "$ref": "#/components/schemas/BlockNumber"
            },
            "data": {
              "description": "The data/input string sent along with the transaction",
              "$ref": "#/components/schemas/Bytes"
            },
            "logIndex": {
              "description": "The index of the event within its transaction, null when its pending",
              "$ref": "#/components/schemas/Integer"
            },
            "removed": {
              "schema": {
                "description": "Whether or not the log was orphaned off the main chain",
                "type": "boolean"
              }
            },
            "topics": {
              "type": "array",
              "items": {
                "topic": {
                  "description": "32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256))",
                  "$ref": "#/components/schemas/DataWord"
                }
              }
            },
            "transactionHash": {
              "description": "The hash of the transaction in which the log occurred",
              "$ref": "#/components/schemas/Keccak"
            },
            "transactionIndex": {
              "description": "The index of the transaction in which the log occurred",
              "$ref": "#/components/schemas/Integer"
            }
          }
        },
        "Uncle": {
          "type": "object",
          "description": "Orphaned blocks that can be included in the chain but at a lower block reward. NOTE: An uncle doesn’t contain individual transactions.",
          "properties": {
            "number": {
              "description": "The block number or null when its the pending block",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "hash": {
              "description": "The block hash or null when its the pending block",
              "$ref": "#/components/schemas/KeccakOrPending"
            },
            "parentHash": {
              "description": "Hash of the parent block",
              "$ref": "#/components/schemas/Keccak"
            },
            "nonce": {
              "description": "Randomly selected number to satisfy the proof-of-work or null when its the pending block",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "sha3Uncles": {
              "description": "Keccak hash of the uncles data in the block",
              "$ref": "#/components/schemas/Keccak"
            },
            "logsBloom": {
              "type": "string",
              "description": "The bloom filter for the logs of the block or null when its the pending block",
              "pattern": "^0x[a-fA-F\\d]+$"
            },
            "transactionsRoot": {
              "description": "The root of the transactions trie of the block.",
              "$ref": "#/components/schemas/Keccak"
            },
            "stateRoot": {
              "description": "The root of the final state trie of the block",
              "$ref": "#/components/schemas/Keccak"
            },
            "receiptsRoot": {
              "description": "The root of the receipts trie of the block",
              "$ref": "#/components/schemas/Keccak"
            },
            "miner": {
              "description": "The address of the beneficiary to whom the mining rewards were given or null when its the pending block",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Address"
                },
                {
                  "$ref": "#/components/schemas/Null"
                }
              ]
            },
            "difficulty": {
              "type": "string",
              "description": "Integer of the difficulty for this block"
            },
            "totalDifficulty": {
              "description": "Integer of the total difficulty of the chain until this block",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "extraData": {
              "type": "string",
              "description": "The 'extra data' field of this block"
            },
            "size": {
              "type": "string",
              "description": "Integer the size of this block in bytes"
            },
            "gasLimit": {
              "type": "string",
              "description": "The maximum gas allowed in this block"
            },
            "gasUsed": {
              "type": "string",
              "description": "The total used gas by all transactions in this block"
            },
            "timestamp": {
              "type": "string",
              "description": "The unix timestamp for when the block was collated"
            },
            "uncles": {
              "description": "Array of uncle hashes",
              "type": "array",
              "items": {
                "description": "Block hash of the RLP encoding of an uncle block",
                "$ref": "#/components/schemas/Keccak"
              }
            }
          }
        },
        "Block": {
          "type": "object",
          "properties": {
            "number": {
              "description": "The block number or null when its the pending block",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "hash": {
              "description": "The block hash or null when its the pending block",
              "$ref": "#/components/schemas/KeccakOrPending"
            },
            "parentHash": {
              "description": "Hash of the parent block",
              "$ref": "#/components/schemas/Keccak"
            },
            "nonce": {
              "description": "Randomly selected number to satisfy the proof-of-work or null when its the pending block",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "sha3Uncles": {
              "description": "Keccak hash of the uncles data in the block",
              "$ref": "#/components/schemas/Keccak"
            },
            "logsBloom": {
              "type": "string",
              "description": "The bloom filter for the logs of the block or null when its the pending block",
              "pattern": "^0x[a-fA-F\\d]+$"
            },
            "transactionsRoot": {
              "description": "The root of the transactions trie of the block.",
              "$ref": "#/components/schemas/Keccak"
            },
            "stateRoot": {
              "description": "The root of the final state trie of the block",
              "$ref": "#/components/schemas/Keccak"
            },
            "receiptsRoot": {
              "description": "The root of the receipts trie of the block",
              "$ref": "#/components/schemas/Keccak"
            },
            "miner": {
              "description": "The address of the beneficiary to whom the mining rewards were given or null when its the pending block",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Address"
                },
                {
                  "$ref": "#/components/schemas/Null"
                }
              ]
            },
            "difficulty": {
              "type": "string",
              "description": "Integer of the difficulty for this block"
            },
            "totalDifficulty": {
              "description": "Integer of the total difficulty of the chain until this block",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "extraData": {
              "type": "string",
              "description": "The 'extra data' field of this block"
            },
            "size": {
              "type": "string",
              "description": "Integer the size of this block in bytes"
            },
            "gasLimit": {
              "type": "string",
              "description": "The maximum gas allowed in this block"
            },
            "gasUsed": {
              "type": "string",
              "description": "The total used gas by all transactions in this block"
            },
            "timestamp": {
              "type": "string",
              "description": "The unix timestamp for when the block was collated"
            },
            "transactions": {
              "description": "Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter",
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Transaction"
                  },
                  {
                    "$ref": "#/components/schemas/TransactionHash"
                  }
                ]
              }
            },
            "uncles": {
              "description": "Array of uncle hashes",
              "type": "array",
              "items": {
                "description": "Block hash of the RLP encoding of an uncle block",
                "$ref": "#/components/schemas/Keccak"
              }
            }
          }
        },
        "Transaction": {
          "type": "object",
          "required": [
            "gas",
            "gasPrice",
            "nonce"
          ],
          "properties": {
            "blockHash": {
              "description": "Hash of the block where this transaction was in. null when its pending",
              "$ref": "#/components/schemas/KeccakOrPending"
            },
            "blockNumber": {
              "description": "Block number where this transaction was in. null when its pending",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "from": {
              "description": "Address of the sender",
              "$ref": "#/components/schemas/Address"
            },
            "gas": {
              "type": "string",
              "description": "The gas limit provided by the sender in Wei"
            },
            "gasPrice": {
              "type": "string",
              "description": "The gas price willing to be paid by the sender in Wei"
            },
            "hash": {
              "$ref": "#/components/schemas/TransactionHash"
            },
            "input": {
              "type": "string",
              "description": "The data field sent with the transaction"
            },
            "nonce": {
              "description": "The total number of prior transactions made by the sender",
              "$ref": "#/components/schemas/Nonce"
            },
            "to": {
              "description": "address of the receiver. null when its a contract creation transaction",
              "$ref": "#/components/schemas/Address"
            },
            "transactionIndex": {
              "description": "Integer of the transaction's index position in the block. null when its pending",
              "$ref": "#/components/schemas/IntOrPending"
            },
            "value": {
              "description": "Value of Ether being transferred in Wei",
              "$ref": "#/components/schemas/Keccak"
            },
            "v": {
              "type": "string",
              "description": "ECDSA recovery id"
            },
            "r": {
              "type": "string",
              "description": "ECDSA signature r"
            },
            "s": {
              "type": "string",
              "description": "ECDSA signature s"
            }
          }
        },
        "TransactionHash": {
          "type": "string",
          "description": "Keccak 256 Hash of the RLP encoding of a transaction",
          "$ref": "#/components/schemas/Keccak"
        },
        "KeccakOrPending": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Keccak"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ]
        },
        "IntOrPending": {
          "oneOf": [
            {
              "$ref": "#/components/schemas/Integer"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ]
        },
        "Keccak": {
          "type": "string",
          "description": "Hex representation of a Keccak 256 hash",
          "pattern": "^0x[a-fA-F\\d]{64}$"
        },
        "Nonce": {
          "description": "A number only to be used once",
          "pattern": "^0x[a-fA-F0-9]+$",
          "type": "string"
        },
        "Null": {
          "type": "null",
          "description": "Null"
        },
        "Integer": {
          "type": "string",
          "pattern": "^0x[a-fA-F0-9]+$",
          "description": "Hex representation of the integer"
        },
        "Address": {
          "type": "string",
          "pattern": "^0x[a-fA-F\\d]{40}$"
        },
        "Position": {
          "type": "string",
          "description": "Hex representation of the storage slot where the variable exists",
          "pattern": "^0x([a-fA-F0-9]?)+$"
        },
        "DataWord": {
          "type": "string",
          "description": "Hex representation of a 256 bit unit of data",
          "pattern": "^0x([a-fA-F\\d]{64})?$"
        },
        "Bytes": {
          "type": "string",
          "description": "Hex representation of a variable length byte array",
          "pattern": "^0x([a-fA-F0-9]?)+$"
        }
      },
      "contentDescriptors": {
        "Block": {
          "name": "block",
          "summary": "A block",
          "description": "A block object",
          "schema": {
            "$ref": "#/components/schemas/Block"
          }
        },
        "Null": {
          "name": "Null",
          "description": "JSON Null value",
          "summary": "Null value",
          "schema": {
            "type": "null",
            "description": "Null value"
          }
        },
        "Signature": {
          "name": "signature",
          "summary": "The signature.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Bytes",
            "pattern": "0x^([A-Fa-f0-9]{2}){65}$"
          }
        },
        "GasPrice": {
          "name": "gasPrice",
          "required": true,
          "schema": {
            "description": "Integer of the current gas price",
            "$ref": "#/components/schemas/Integer"
          }
        },
        "Transaction": {
          "required": true,
          "name": "transaction",
          "schema": {
            "$ref": "#/components/schemas/Transaction"
          }
        },
        "TransactionResult": {
          "name": "transactionResult",
          "description": "Returns a transaction or null",
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/Transaction"
              },
              {
                "$ref": "#/components/schemas/Null"
              }
            ]
          }
        },
        "Message": {
          "name": "message",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Bytes"
          }
        },
        "Filter": {
          "name": "filter",
          "required": true,
          "schema": {
            "type": "object",
            "description": "A filter used to monitor the blockchain for log/events",
            "properties": {
              "fromBlock": {
                "description": "Block from which to begin filtering events",
                "$ref": "#/components/schemas/BlockNumber"
              },
              "toBlock": {
                "description": "Block from which to end filtering events",
                "$ref": "#/components/schemas/BlockNumber"
              },
              "address": {
                "oneOf": [
                  {
                    "type": "string",
                    "description": "Address of the contract from which to monitor events",
                    "$ref": "#/components/schemas/Address"
                  },
                  {
                    "type": "array",
                    "description": "List of contract addresses from which to monitor events",
                    "items": {
                      "$ref": "#/components/schemas/Address"
                    }
                  }
                ]
              },
              "topics": {
                "type": "array",
                "description": "Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with 'or' options",
                "items": {
                  "description": "Indexable 32 bytes piece of data (made from the event's function signature in solidity)",
                  "$ref": "#/components/schemas/DataWord"
                }
              }
            }
          }
        },
        "Address": {
          "name": "address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "BlockHash": {
          "name": "blockHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockHash"
          }
        },
        "Nonce": {
          "name": "nonce",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Nonce"
          }
        },
        "Position": {
          "name": "key",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Position"
          }
        },
        "Logs": {
          "name": "logs",
          "description": "An array of all logs matching filter with given id.",
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          }
        },
        "FilterId": {
          "name": "filterId",
          "schema": {
            "description": "The filter ID for use in `eth_getFilterChanges`",
            "$ref": "#/components/schemas/Integer"
          }
        },
        "BlockNumber": {
          "name": "blockNumber",
          "required": true,
          "schema": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/BlockNumber"
              },
              {
                "$ref": "#/components/schemas/BlockNumberTag"
              }
            ]
          }
        },
        "TransactionHash": {
          "name": "transactionHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionHash"
          }
        }
      }
    }
  }